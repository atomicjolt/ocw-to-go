{
  "version": 3,
  "sources": ["../src/worker.ts"],
  "sourcesContent": ["export type {};\ndeclare const self: ServiceWorkerGlobalScope;\n\nconsole.log(\"The Worker Ran\");\n\nconst ASSETS_TO_CACHE = [\n  '/',\n  '/index.html',\n  '/favicon.ico',\n  '/styles/pico.min.css',\n  '/app.js',\n  '/course.js',\n  '/manifest.json',\n  '/icons/android/android-launchericon-192-192.png',\n  '/icons/android/android-launchericon-512-512.png',\n];\n\nself.addEventListener('install', event => {\n  console.log(\"The Worker Installed\", event);\n  event.waitUntil((async () => {\n    const cache = await caches.open(\"pwa-assets\");\n    await cache.addAll(ASSETS_TO_CACHE);\n  })()); \n  // Activate worker immediately\n  self.skipWaiting()\n});\n\nself.addEventListener('activate', event => {\n  console.log(\"The Worker Activated\", event);\n  \n  // Become available to all pages\n  event.waitUntil(self.clients.claim());\n});\n\naddEventListener('fetch', (event: FetchEvent) => {\n  console.log(\"The Worker Fetched\", event.request.url);\n  event.respondWith(cacheFirst(event.request));\n});\n\naddEventListener('message', event => {\n  console.log(\"The Worker Received a Message\", event);\n  // if (typeof event.data === 'object' && !Array.isArray(event.data) && event.data !== null) {\n  //   if (event.data.type === 'downloadCourse') {\n  //     downloadCourse(event.data.path, event.data.courseId, event.source!);\n  //   }\n  // }\n});\n\nasync function cacheFirst(request: Request) {\n  // return (await caches.match(request)) || await fetch(request);\n  return (await fileFromCache(request)) || await fetch(request);\n}\n\nasync function fileFromCache(request: Request): Promise<Response | undefined> {\n  const url = URL.parse(request.url);\n  if (url && url.search.includes('forcedownload=true')) {\n    url.search = '';\n    const response = await caches.match(url);\n    if (response) {\n      const fileName = url.pathname.split('/').pop();\n      response.headers.set('Content-Disposition', `attachment; filename=\"${fileName}\"`);\n    }\n    return Promise.resolve(response);\n  }\n\n  const response = await caches.match(request);\n  return Promise.resolve(response);\n}\n"],
  "mappings": ";;;AAGA,UAAQ,IAAI,gBAAgB;AAE5B,MAAM,kBAAkB;AAAA,IACtB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,OAAK,iBAAiB,WAAW,WAAS;AACxC,YAAQ,IAAI,wBAAwB,KAAK;AACzC,UAAM,WAAW,YAAY;AAC3B,YAAM,QAAQ,MAAM,OAAO,KAAK,YAAY;AAC5C,YAAM,MAAM,OAAO,eAAe;AAAA,IACpC,GAAG,CAAC;AAEJ,SAAK,YAAY;AAAA,EACnB,CAAC;AAED,OAAK,iBAAiB,YAAY,WAAS;AACzC,YAAQ,IAAI,wBAAwB,KAAK;AAGzC,UAAM,UAAU,KAAK,QAAQ,MAAM,CAAC;AAAA,EACtC,CAAC;AAED,mBAAiB,SAAS,CAAC,UAAsB;AAC/C,YAAQ,IAAI,sBAAsB,MAAM,QAAQ,GAAG;AACnD,UAAM,YAAY,WAAW,MAAM,OAAO,CAAC;AAAA,EAC7C,CAAC;AAED,mBAAiB,WAAW,WAAS;AACnC,YAAQ,IAAI,iCAAiC,KAAK;AAAA,EAMpD,CAAC;AAED,iBAAe,WAAW,SAAkB;AAE1C,WAAQ,MAAM,cAAc,OAAO,KAAM,MAAM,MAAM,OAAO;AAAA,EAC9D;AAEA,iBAAe,cAAc,SAAiD;AAC5E,UAAM,MAAM,IAAI,MAAM,QAAQ,GAAG;AACjC,QAAI,OAAO,IAAI,OAAO,SAAS,oBAAoB,GAAG;AACpD,UAAI,SAAS;AACb,YAAMA,YAAW,MAAM,OAAO,MAAM,GAAG;AACvC,UAAIA,WAAU;AACZ,cAAM,WAAW,IAAI,SAAS,MAAM,GAAG,EAAE,IAAI;AAC7C,QAAAA,UAAS,QAAQ,IAAI,uBAAuB,yBAAyB,QAAQ,GAAG;AAAA,MAClF;AACA,aAAO,QAAQ,QAAQA,SAAQ;AAAA,IACjC;AAEA,UAAM,WAAW,MAAM,OAAO,MAAM,OAAO;AAC3C,WAAO,QAAQ,QAAQ,QAAQ;AAAA,EACjC;",
  "names": ["response"]
}
